extends layout

block content
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css")
  link(rel="stylesheet", href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css")

  .container.mt-5
    h2.text-center.mb-4 Smart Dispenser Dashboard

    .d-flex.justify-content-between.align-items-center.mb-3
      span Welcome, #{username}!
      a.btn.btn-danger(href="/logout") Logout

    .text-end.mb-3
      a.btn.btn-primary(href="/form") Add New Smart Dispenser

    if success
      .alert.alert-success.text-center= success

    if error
      .alert.alert-danger.text-center= error

    if smartObjects.length
      .table-responsive
        table.table.table-striped
          thead
            tr
              th Address
              th Latitude
              th Longitude
              th Altitude
              th Characteristics
              th Actions
          tbody
            each object in smartObjects
              tr
                td #{object.fullAddress || 'N/A'}
                td #{object.reallatitude !== null ? object.reallatitude : 'N/A'}
                td #{object.reallongitude !== null ? object.reallongitude : 'N/A'}
                td #{object.altitude !== null ? object.altitude : 0}
                td
                  pre= JSON.stringify(object.characteristics || {}, null, 2)
                td
                  a.btn.btn-sm.btn-warning(href=`/edit/${object.address}`) Edit
                  a.btn.btn-sm.btn-danger(type="button" onclick=`deleteAddress('${object.address}')`) Delete
    else
      p.text-center.text-muted No smart objects found.

    h3.text-center.mt-5 Smart Object Map
    #map(style="height: 500px;")

  script(src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js")
  script.
    const map = L.map('map').setView([20, 0], 2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Â© OpenStreetMap'
    }).addTo(map);

    const objects = !{JSON.stringify(smartObjects)};
    objects.forEach(obj => {
      if (obj.reallatitude !== null && obj.reallongitude !== null) {
        L.circle([obj.reallatitude, obj.reallongitude], {
          color: 'blue',
          fillColor: '#30f',
          fillOpacity: 0.5,
          radius: 50
        }).addTo(map).bindPopup(`${obj.fullAddress || 'Unknown'}`);
      }
    });
    async function deleteAddress(address) {
    if (!confirm('Are you sure you want to delete this?')) return;
    try {
      const res = await fetch(`/api/address/${address}`, { method: 'DELETE' });
      if (res.ok) {
        alert('Deleted successfully!');
        window.location.reload();
      } else {
        const data = await res.json();
        alert('Delete failed: ' + (data.error || res.statusText));
      }
    } catch (err) {
      alert('Error deleting: ' + err.message);
    }
    };

