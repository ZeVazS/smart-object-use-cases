extends layout

block content
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css")

  .d-flex.justify-content-center.align-items-center.min-vh-100
    .card.shadow.p-4(style="width: 100%; max-width: 500px")
      h2.mb-4.text-center Submit Smart Object

      if success
        .alert.alert-success.text-center Object submitted successfully!
      if error
        .alert.alert-danger.text-center #{error}

      form
        input(type="hidden", name="owner_id", value=user.id)

        .mb-3
          label.form-label(for="type") Type
          select.form-select(name="type" required)
            option(value="S") Static
            option(value="D") Dynamic
        .mb-3
          label.form-label(for="country") Country
          input.form-control(type="text" name="country" required placeholder="e.g. 640(Portugal)")

        .mb-3
          label.form-label(for="latitude") Latitude
          input.form-control(type="number" step="any" name="latitude" required placeholder="e.g. 38.7223")

        .mb-3
          label.form-label(for="longitude") Longitude
          input.form-control(type="number" step="any" name="longitude" required placeholder="e.g. -9.1393")

        .mb-3
          label.form-label(for="altitude") Altitude
          input.form-control(type="number" step="any" name="altitude" required placeholder="e.g. 10")

        .mb-3
          label.form-label(for="characteristics") Characteristics (JSON format)
          textarea.form-control(name="characteristics" rows="3" placeholder='{"remainingBags":30}')

        button.btn.btn-primary.w-100(type="submit") Submit

block scripts
  script.
    document.addEventListener("DOMContentLoaded", () => {
      const form = document.querySelector("form");
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
          data.characteristics = JSON.parse(data.characteristics || "{}");
        } catch (err) {
          alert("Erro: o campo Characteristics deve estar em formato JSON v√°lido.");
          return;
        }

        try {
          const res = await fetch("/api/address", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
          });

          if (res.status === 201) {
            const json = await res.json();
            window.location.href = "/dashboard";
          } else {
            const err = await res.json();
            alert("Erro ao submeter: " + (err.error || "desconhecido"));
          }
        } catch (err) {
          alert("Erro de rede: " + err.message);
        }
      });
    });
